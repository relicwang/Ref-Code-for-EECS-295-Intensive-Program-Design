;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname lec9a) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
Streams
=======

DSSL

what if I wrote this data definition:

  a Listof-numbers is:
   (cons Number List-of-numbers)

what would you say?

lets make some examples: what happens?

What if we tried this:

  (define ones (cons 1 ones))

that should work, in principle -- why doesn't it? 

hand evaluation tells us: since we are working on the
definition for `ones' we cannot yet look up the definition
for ones.

What are we hinting at, tho? (infinite list of ones)

new data definition:

;; a Stream is
;;   (make-stream Number (-> Stream))

(define-struct stream (num rest))

Look at this for a moment. We've got a function that takes
no arguments. Strange, no? Hm. Can we make an example?

  (define ones (make-stream 1 (lambda () ones)))

this time, the definition of ones is already done -- there's
nothing to be done for either argument of make-stream, so we're
done.

Now we're getting closer to that infinite list!

What's really going on with this function of no arguments?
Functions really do two things: first they are
parameterized. But secondly, they make things wait (until
arguments show up). So far, we haven't focused on that
aspect of functions, but this example really brings that
out!

In this case, we want to wait to lookup the ones until it
has been defined.

Using our hand-evaluation rules, we can do this now:

  (stream-num ones) = 1
  (stream-num ((stream-rest ones))) = 1
  (stream-num ((strem-rest ((stream-rest ones))))) = 1

Each time we take `rest' we have to add an extra pair of
parens to actually extract or "force" the function to give
us our result.

So, what about the template?

  no condition in the data, so no conditions here! (weird,
  huh? :)

(define (stream-template stream)
 .. (stream-num stream)
 .. (stream-template ((stream-rest stream))))

Lets try to write a function on streams, called add1-stream:

(define (add1-stream stream)
  (make-stream (add1 (stream-num stream))
               (lambda () (add1-stream ((stream-rest stream))))))

(define twos (add1-stream ones))

;; take : Nat Stream -> (Listof Numbers)
;; to find the nth element of the stream.
;; structural template on Nat.
(define (take n stream)
  (cond
    [(zero? n) '()]
    [else (cons (stream-num stream)
                (take (- n 1) ((stream-rest stream))))]))

This one is mostly useful to test our streams.

Can we now define a stream that isn't constant?

How about this:

  (define nats (make-stream 0 (add1-stream nats)))

wrong!

The second argument to make-stream is _not_ a stream, but it should be
a function that returns a stream.

  (define nats (make-stream 0 (lambda () (add1-stream nats))))

Lets generalize add1-stream to map-stream:

;; map-stream : (Number -> Number) Stream -> Stream
(define (map-stream f stream)
  (make-stream (f (stream-num stream))
               (lambda () (map-stream f ((stream-rest stream))))))

How would we make a stream of the perfect squares?

(define (square x) (* x x))

(define squares (map-stream square nats))

How about filtering a stream:

(define (filter-stream p stream)
  (cond
    [(p (stream-num stream))
     (make-stream (stream-num stream)
                  (lambda ()
                    (filter-stream p ((stream-rest stream)))))]
    [else (filter-stream p ((stream-rest stream)))]))

(take 5 (filter-stream odd? nats))

How about prime numbers?

Anyone know the Sieve of Eratosthenes?

how does it work?

[ draw grid for the first 25 numbers and filter out the
  first few. ]

so, how would we implement this?

we can filter out numbers that are divisible by a particular
number, right?

;; remove-div : number stream -> stream
(define (remove-div n stream)
  (filter-stream (lambda (x) (not (zero? (modulo x n))))
                 stream))

(take 5 (remove-div 2 nats))

now, we just need a function that does this process for the
entire stream:


(define (sieve stream)
  (make-stream (stream-num stream)
               (lambda ()
                 (remove-div (stream-num stream)
                             (sieve ((stream-rest stream)))))))

then, the first prime number is 2, so we need
the nats starting from 2:

(define nats-from-2 (make-stream 2 (lambda () (map-stream add1 nats-from-2))))

and we sieve that for the primes:

(take 9 (sieve nats-from-2)) ;; and we get the chart back


There is a performance problem here. In order to see it, lets stick a
printf into the code:

(define (add1-stream stream)
  (make-stream (add1 (stream-num stream))
               (lambda ()
                 (printf "~a\n" (stream-num stream))
                 (add1-stream ((stream-rest stream))))))

We really don't want to compute that add1-stream so many times. But it
gets computed EACH TIME we call the function. What can we do about it?
Get rid of the function? No.... that didn't work at the beginning of
lecture.

So: we need something else. A new tool.
