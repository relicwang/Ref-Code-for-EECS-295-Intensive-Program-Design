;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname lec08b) (read-case-sensitive #t) (teachpacks ((lib "universe.rkt" "teachpack" "2htdp") (lib "image.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "universe.rkt" "teachpack" "2htdp") (lib "image.rkt" "teachpack" "2htdp")) #f)))
natural numbers
--------------

Up to now, we've just treated numbers as atomic data and
used +, -, etc on them. But, what if we wanted to build a
list whose length was based on a given number? Without some
builtin thing, you couldn't do that.

So, I'm going to show you a wierd data definition now:

  a nat is either:
   - 0
   - (add1 nat)

This is a different way of looking at numbers -- we think
of them as having structure internal structure.

So, how would we write a template for that:

(define (fun-for-nat n)
  (cond
    [(zero? n) ...]
    [else ... (fun-for-nat (sub1 n)) ...]))

So, lets use this to write a function:

;; build-syms : nat symbol -> [Listof symbol]
;; to construct a list of the symbols s 
;; with length `n'.
(check-expect (build-syms 0 'chair) '())
(check-expect (build-syms 3 'doll)
              (list 'doll 'doll 'doll))
(check-expect (length (build-syms 123 'hi)) 123)

(define (build-syms s n)
  (cond
    [(zero? n) empty]
    [else (cons s (build-syms s (sub1 n)))]))

Okay, lets go further: say I wanted to vary the elements in
the list. So, I want something like this:

;; build-list : (nat -> X) nat -> (listof X)
;; build a list of length `n', where each element
;; is given by calling `f' on its index.

;; tests
(check-expect (build-list (lambda (x) 'hi) 0) '())

(check-expect (build-list (lambda (x) 'doll) 3)
              (list 'doll 'doll 'doll))

(check-expect (build-list (lambda (x) (* x x)) 4)
              (list 0 1 4 9))

;; build-a-list : nat (nat -> X) -> [Listof X]
(define (build-a-list f n)
  (cond
    [(zero? n) empty]
    [else (cons (f n) (build-a-list f (sub1 n)))]))

hand evaluation:

(define (sq x) (* x x))
  (build-list sq 3)
= (cons 9 (build-list sq 2))
= (cons 9 (cons 4 (build-list sq 1)))
= (cons 9 (cons 4 (cons 1 (build-list sq 0))))
= (cons 9 (cons 4 (cons 1 empty)))

Uh oh. It's backwards! And it doesn't end with 0, but instead 1.

Well, what can we do about that?  We could reverse the list
afterwards. Or, we could call `f` with different numbers. Here's the
latter solution:

;; build-a-list : nat (nat -> X) -> [Listof X]
(define (build-a-list f n)
  (build-a-list/orig-length f n n))

(define (build-a-list/orig-length f n start-n)
  (cond
    [(zero? n) empty]
    [else (cons (f (- start-n n))
                (build-a-list/orig-length f (sub1 n) start-n))]))

This function is actually built in; it is called build-list.
