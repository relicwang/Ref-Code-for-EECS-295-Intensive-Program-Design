;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname lec07c) (read-case-sensitive #t) (teachpacks ((lib "universe.rkt" "teachpack" "2htdp") (lib "image.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "universe.rkt" "teachpack" "2htdp") (lib "image.rkt" "teachpack" "2htdp")) #f)))
generative recursion, cotd: quicksort
--------------------------------------------------

basic idea: split the list into two sublists: one with all
elements smaller than the first element and one with all
elements larger than the pivot. Recursively sort the
sublists and then put them together.

Here's a picture of how this looks:


             (list 3 2 12 11)
--------------------+---+-----------------------------------
      (list 2)      | 3 |              (list 12 11)
-------+---+--------|   |-----------------------+--+--------
 (list)| 2 | (list) |   |       (list 11)       |12| (list)
-------+---+--------|   |-----------------------|  |
                    |   | (list) | 11 | (list)  |  |
                    |   |--------+----+---------|  |
      (list 2)      |   |       (list 11)       |  |
                    |   |-----------------------+--+--------
                    |   |               (list 11 12)
--------------------+---+-----------------------------------
              (list 2 3 11 12)

base case: empty.

(define (quicksort l)
  (cond
   [(empty? l) empty]
   [else (append (quicksort (smaller-than (first l) l))
                 (list (first l))
                 (quicksort (larger-than (first l) l)))]))

;; BOGUS versions:

(define (smaller-than x l)
  (filter (lambda (y) (<= y x)) l))
(define (larger-than x l)
  (filter (lambda (y) (>= y x)) l))

  (quicksort (list 3 2 12 11))
= (append (quicksort (list 3 2))
          (list 3)
          (quicksort (list 3 12 11)))

;;  less obviously BOGUS versions.

(define (smaller-than x l)
  (filter (lambda (y) (< y x)) l))
(define (larger-than x l)
  (filter (lambda (y) (> y x)) l))

(quicksort (list 3 2 12 11))
=
(append (quicksort (list 2))
        (list 3)
        (quicksort (list 12 11)))
=
(append (append (quicksort empty) (list 2) (quicksort empty))
        (list 3)
        (quicksort (list 12 11)))
=
(append (list 2)
        (list 3)
        (quicksort (list 12 11)))
=
(append (list 2)
        (list 3)
        (append (quicksort empty) (list 11) (quicksort (list 12))))
=
(append (list 2)
        (list 3)
        (append empty
                (list 11) 
                (append (quicksort empty) (list 12) (quicksort empty))))
=
(append (list 2)
        (list 3)
        (append empty
                (list 11) 
                (append empty (list 12) empty)))

(list 2 3 11 12)


Now we terminate, but what about this list:

(quicksort (list 2 1 2 3))
= ... =
(list 1 2 3)

Any ideas on fixing that one?

Two changes: add (rest l) in calls in quicksort, and use <=
in one and > in the other.

============================================================


Recall our two sorting functions: quicksort and sort. Of
course, they are different. But, there is a perspective in
which they are the same. Right? What is that?

They behave identically! Same inputs => same outputs.

So, why might you prefer one over the other? Generally,
there are two reqsons one might: maintainability and
performance. In this case, they are pretty much equally
maintainable (indeed, they have both been proven correct
...) but one is faster than the other.

Lets pursue this idea little bit more.

Lets develop a function that finds the greatest common
divisor of two numbers.

;; a nat[>=1] is either:
;;  - 1
;;  - (add1 nat[>=1])

;; gcd : nat[>=1] nat[>=1] -> nat[>=1]
;; to find the greatest common divisor of a and b
(define (gcd a b)
  ...)

So ... what do we do? Structural? Generative? Helper Functions?

Any ideas?

Well, we know that the answer must be smaller (or equal) to
both a and b. And, we know that the answer must be a natual
number. So .. we could just try all the numbers, counting
down, starting with the smaller of the two, right?

Sounds like structural recursion on numbers to me, no?

;; find-divisor : nat[>=1] nat nat -> nat[>=1]
;; to find a divisor of both a and b that is equal to or less than i.
(define (find-divisor i a b)
  (cond
    [(= i 1) 1]
    [else 
     (cond
      [(and (zero? (remainder a i))
            (zero? (remainder b i)))
       i]
      [else (find-divisor (- i 1) a b)])]))

(define (gcd a b) (find-divisor (min a b) a b))

> (time (gcd-structural 797640 702559))
289

takes 3479 msec

Hm. That seems a little bit slow! The numbers aren't all
that big, are they?

Turns out that this has been studied before. Here's a fact.

    (gcd larger smaller) 
  = (gcd smaller (remainder larger smaller))

  if (zero? (remainder larger smaller))
  then the gcd of larger and smaller is just smaller, right?

(I wrote it that way so that the larger of the two is always
first, since smaller will be bigger than the remainder).

Can we exploit that fact, maybe in a generative recursive algorithm?

Imagine how this would work for, say, 18 and 30,

  (gcd 30 18)
= (gcd 18 (remainder 30 18))
= (gcd 18 12)
= (gcd 12 (remainder 18 12))
= (gcd 12 6)
= (gcd 6 (remainder 12 6))
= (gcd 6 0)
= ???

well, if we just imagine that 0 divides every number, then
we can say the answer for the greatest common divisor of 0
and 6 is 6. Its a bit of a stretch, but it makes our little
fact useful, since 6 is indeed the greatest common divisor
of 30 and 18.

So. How can we exploit this?

;; clever-gcd : nat nat -> nat
(define (clever-gcd bigger smaller)
  (cond
    [(zero? smaller) bigger]
    [else (clever-gcd smaller (remainder bigger smaller))]))

(define (gcd-generative a b) (clever-gcd (max a b) (min a b)))

(time (gcd-generative 797640 702559) 
      ... 10,000 times....
      )
23 msec.

Wow. That's a 150,000x speedup.

This is called Euclid's algorithm, but I hear rumors it was known
before that ...

