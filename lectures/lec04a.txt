;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname lec04a) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
local
-----

new syntax:

  (local [defn1 ... defnn] exp)

new language: ISL (intermediate student).

Each defn can be either a function definition, a
variable definition, or a define-struct.

This "local"izes the definitions in the local, so they are
only available in the local and in the body expression.

Every programming language has its own mechanism for doing
this. local is not the best one out there, but it is the
simplest one that lets us explore the common issues to each
of them.

First, it lets us deal with programs where we have many
definitions. We can group them now.

Recall sorting:

  (define (sort l)
    (cond
      [(empty? l) l]
      [else (insert (first l) (sort (rest l)))]))

  (define (insert x l)
    (cond
      [(empty? l) (list x)]
      [else (cond
              [(< x (first l)) (cons x l)]
              [else (cons (first l) (insert x (rest l)))])]))


If want, now we can package up the insert function inside sort.


(define (sort l)
  (local [(define (sort l)
            (cond
              [(empty? l) l]
              [else (insert (first l) (sort (rest l)))]))
        
          (define (insert x l)
            (cond
              [(empty? l) (list x)]
              [else (cond
                      [(< x (first l)) (cons x l)]
                      [else (cons (first l) (insert x (rest l)))])]))]
     (sort l)))

clear? Does that expression make sense?

Scope!!

Scope is a set of rules that tells us which variables are
active in which parts of the program. 

Lets start with just toplevel definitions:

(define (f x)
  ... (g 1) ... x ...)

(define (g x)
  ... (f 2) ... x ...)

;; tests
(f ...)
(g ...)

What variables are there? Where are the bound?

toplevel: f, g => available everywhere

function parameters: 2 x's => available in the body of their
respective functions. draw boxes

Moving back to the local expression:

Draw a box around the local expression -- all of the
definitions are active in that area.

What about conflicts?

use the nearest enclosing definition.

>> semantics of local:

hand evaluation rules for local:

  1) never evaluate inside a local
  2) when you get to a local, lift
     the definitions to the top and
     leave behind the body of the local

For example:


   (+ (local [(define x 2) (define y (+ x 2))] (+ y 2)) 1)

the next step is the local itself. Don't look inside.

   (define x 2)
   (define y (+ x 2))
 = (+ (+ y 2) 1)

   (define x 2)
   (define y 4)
 = (+ (+ y 2) 1)

   (define x 2)
   (define y 4)
 = 7

What about name conflicts?

  (define x 1)
  (+ (local [(define x 2) (define y (+ x 2))] (+ y 2)) x)

  (define x 1)
  (define x 2)
  (define y (+ x 2))
= (+ (+ y 2) x)

which x is which?

We need to rename when lifting. This is what we should do:

  (define x 1)
  (define x1 2)
  (define y1 (+ x1 2))
= (+ (+ y 2) x)

In general, make up a new suffix for each of the defined
names in a local, rename the local and then do the lifting.

>> pragmatics of local:

First, as we have seen above, it can group helper functions.

Second, it can help to name parts of complex expressions

  ;; sixteenth power
  (define (sixteenth i) 
    (local ((define double (* i i))
            (define quad (* double double))
            (define eth (* quad quad)))
      (* eth eth)))

  (define (sixteenth i)
    (* i
       i
       i
       i
       i
       i
       i
       i
       i
       i
       i
       i
       i
       i
       i))


But there is more to this problem. Lets reconsider the function biggest:

(define (biggest l)
  (cond
    [(empty? l) 0]
    [else
     (cond 
       [(< (first l) (biggest (rest l)))
        (biggest (rest l))]
       [else (first l)])]))

If we didn't have to recursive calls, we wouldn't have two calls to
time, we wouldn't have that terrible cost, right? How can we do that?

(define (biggest l)
  (cond
    [(empty? l) 0]
    [else
     (local [(define rb (biggest (rest l)))]
       (cond
         [(< (first l) rb)
          rb]
         [else (first l)]))]))

Running the same experiments from last time shows a remarkable speedup:

Welcome to DrRacket, version 6.6.0.4--2016-08-23(2e5b4a65/d) [3m].
Language: Intermediate Student; memory limit: 1024 MB.
cpu time: 0 real time: 0 gc time: 0
15
cpu time: 0 real time: 0 gc time: 0
16
cpu time: 0 real time: 0 gc time: 0
17
cpu time: 0 real time: 0 gc time: 0
18
cpu time: 0 real time: 0 gc time: 0
19
cpu time: 0 real time: 0 gc time: 0
20
Both tests passed!


Probably these are zeros because the time is below the resolution of
the clock (somewhere between 0 milliseconds and 1 millisecond).